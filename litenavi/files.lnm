#!/bin/bash
: ${Root_Dir:=$PWD} #корневой каталог по умолчанию
: ${Files_Block_2:=*} #маска для второго списка фалов по умолчанию (все видимые файлы)

Filter_and_Sort (){
    : ${Filter_Input:=n=*}
    : ${Sort_Input:=n}
    Filter=($(echo "${Filter_Input}" | sed "s|,|\n|g")) 
    Sort=($(echo "${Sort_Input}" | sed "s|\-||g;s|\(.\)|\1\n|g")) 
    List_FS=($(stat -c "$(printf "%%%c	" "${Filter[@]}" "${Sort[@]}")" ${Files_Block_1} ${Files_Block_2} | nl -v 0 -n ln | sed "s|\([0-9]*\) *\t*\(.*$\)|\2\t\1|")) 

    for i in $(seq 0 $((${#Filter[@]}-1))); do
        Condition="$(echo "${Filter[$i]:1:2}" | sed "s|[^=\!><]||g")" 
        Filter_Value=$(echo "${Filter[$i]:1}" | sed "s|^[=\!><]*||") 
        case ${Condition} in
            =|==) 
                for c in $(seq $((${#List_FS[@]}-1)) -1 0); do
                    List_FS_Value=$(printf "%s\n" ${List_FS[$c]} | sed "s|\t.*$||") 
                    [[ ${List_FS_Value} =~ ${Filter_Value} ]] || List_FS=("${List_FS[@]:0:$c}" "${List_FS[@]:$(($c+1))}")
                done;;
            !=) 
                for c in $(seq $((${#List_FS[@]}-1)) -1 0); do
                    List_FS_Value=$(printf "%s\n" ${List_FS[$c]} | sed "s|\t.*$||") 
                    [[ ${List_FS_Value} =~ ${Filter_Value} ]] && List_FS=("${List_FS[@]:0:$c}" "${List_FS[@]:$(($c+1))}")
                done;;
        esac
        List_FS=($(printf "%s\n" ${List_FS[@]} | sed "s|^[^\t]*\t||"))
    done

    Sort=($(echo "${Sort_Input}" | sed "s|\([^\-]\)|\1\n|g")) 
    for i in $(seq 0 $((${#Sort[@]}-1))); do
        [[ ${Sort[$i]:0:1} = "-" ]] && Minus_Sign="-r" || Minus_Sign=""
        List_FS=($(printf "%s\n" ${List_FS[@]} | sort ${Minus_Sign}))
        List_FS=($(printf "%s\n" ${List_FS[@]} | sed "s|^[^\t]*\t||"))
    done

    Filter_and_Sort=(${List_FS[@]})
}

Module_List (){ #создаём список файлов
    Module_List=($(stat -c "${Options}	%n" ${Files_Block_1} ${Files_Block_2})) #cоздаём список фалов текущего каталога (табуляция в атрибутах!!!)
    echo !!!!!!1
    echo ${Filter_Input}
    sleep 7
    if [[ -n ${Filter_Input} || -n ${Sort_Input} ]]; then
        Filter_and_Sort
        for i in $(seq 0 $((${#Filter_and_Sort[@]}-1))); do
            Interim_List[$i]=${Module_List[${Filter_and_Sort[$i]}]}
        done
        Module_List=(${Interim_List[@]}) 
    fi
    LN_Mark_List=($(printf "%.s \n" ${Module_List[@]}))
}

Module_Keys (){
    case $REPLY in
        h${Lock_hl}) #переход в родительский каталог
            if [[ "$PWD" != "${Root_Dir}" ]]; then #если текущий каталог не корень, то
                Old_Dir="$(basename $PWD)" #запоминаем имя текущего каталога
                cd .. #переходим в родительский каталог
                Module_List #cоздаём список файлов нового текущего каталога
                LN_Current_Line=$(($(printf "%s\n" ${Module_List[@]} | sed -n "/${Old_Dir}/=;/${Old_Dir}/q; d")-1)) #ищем номер предыдущего текущего каталога в новом списке
                if [[ ${LN_Current_Line} -gt ${LN_Visible_List_Area} ]]; then #если этот номер больше количества строк в видимой области, то
                    LN_Top_Line=$((${LN_Current_Line}-${LN_Visible_List_Area})) #вычисляем первую строку видимой области для отображения старого текущего каталога
                else
                    LN_Top_Line=0 #иначе, видимая область с начала списка
                fi
                LN_Screen_Rendering #отрисовываем экран
            fi;;
        l${Lock_hl}) #переход в каталог из текущей строки
            Current_File_Name="${Module_List[${LN_Current_Line}]##*	}" #запоминаем имя текущего файла
            Current_File_Type=$(stat -c %A "${Current_File_Name}") #запоминаем тип и разрешения текущего файла
            case ${Current_File_Type:0:1} in
                'd') #если текущий файл каталог, то переходим в него
                    cd "${Current_File_Name}"
                    LN_Current_Line=0 #текущую строку в начало списка
                    LN_Top_Line=0 #видимая область с начала списка
                    Module_List #создаём список файлов нового текущего каталога
                    LN_Screen_Rendering;; #отрисовываем экран
                '-') #если текущий файл - просто файл, то пытаемся запустить
                    "$PWD/${Current_File_Name}"
                    sleep 5
                    LN_Screen_Rendering;; #отрисовываем экран
            esac;;
    esac
}

Module_Output (){
    LN_Output=()
    for i in $@; do
        LN_Output+=(${Module_List[$i]##*	})
    done
}
